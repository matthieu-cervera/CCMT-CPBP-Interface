/*
 * mini-cp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License  v3
 * as published by the Free Software Foundation.
 *
 * mini-cp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY.
 * See the GNU Lesser General Public License  for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with mini-cp. If not, see http://www.gnu.org/licenses/lgpl-3.0.en.html
 *
 * Copyright (c)  2018. by Laurent Michel, Pierre Schaus, Pascal Van Hentenryck
 */

package minicpbp.search;

import minicpbp.state.StateManager;
import minicpbp.util.exception.InconsistencyException;
import minicpbp.util.exception.NotImplementedException;
import minicpbp.util.Procedure;

import minicpbp.engine.core.IntVar;
import minicpbp.cp.Factory;
import minicpbp.cp.Factory.IntHolder;

import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import java.util.function.Supplier;

/**
 * Depth First Search Branch and Bound implementation
 */
public class DFSearch extends Search{

    private Supplier<Procedure[]> branching;
    private Supplier<Procedure[]> branchingSecond;
    private StateManager sm;

    private List<Procedure> solutionListeners = new LinkedList<Procedure>();
    private List<Procedure> failureListeners = new LinkedList<Procedure>();

    /**
     * Creates a Depth First Search object with a given branching
     * that defines the search tree dynamically.
     *
     * @param sm the state manager that will be saved and restored
     *           at each node of the search tree
     * @param branching a generator of closures in charge of defining the ordered
     *                  children nodes at each node of the depth-first-search tree.
     *                  When it returns an empty array, a solution is found.
     *                  A backtrack occurs when a {@link InconsistencyException}
     *                  is thrown.
     */
    public DFSearch(StateManager sm, Supplier<Procedure[]> branching) {
        this.sm = sm;
        this.branching = branching;
        this.branchingSecond = null;
    }

    public DFSearch(StateManager sm, Supplier<Procedure[]> branching, Supplier<Procedure[]> branchingSecond) {
        this.sm = sm;
        this.branching = branching;
        this.branchingSecond = branchingSecond;
    }

    /**
     * Adds a listener that is called on each solution.
     *
     * @param listener the closure to be called whenever a solution is found
     */
    public void onSolution(Procedure listener) {
        solutionListeners.add(listener);
    }

    /**
     * Adds a listener that is called whenever a failure occurs
     * and the search backtracks.
     * This happensthat when a {@link InconsistencyException} is thrown
     * when executing the closure generated by the branching.
     *
     * @param listener the closure to be called whenever a failure occurs and
     *                 the search need to backtrack
     */
    public void onFailure(Procedure listener) {
        failureListeners.add(listener);
    }

    private void notifySolution() {
        solutionListeners.forEach(s -> s.call());
    }

    private void notifyFailure() {
        failureListeners.forEach(s -> s.call());
    }

    private SearchStatistics solve(SearchStatistics statistics, Predicate<SearchStatistics> limit) {
        sm.withNewState(() -> {
            try {
                dfs(statistics, limit);
                statistics.setCompleted();
            } catch (StopSearchException ignored) {
            } catch (StackOverflowError e) {
                throw new NotImplementedException("dfs with explicit stack needed to pass this test");
            }
        });
        return statistics;
    }


    /**
     * Effectively start a depth first search
     * looking for every solution.
     *
     * @return an object with the statistics on the search
     */
    public SearchStatistics solve() {
        SearchStatistics statistics = new SearchStatistics();
        return solve(statistics, stats -> false);
    }

    /**
     * Effectively start a depth first search
     * with a given predicate called at each node
     * to stop the search when it becomes true.
     *
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @return an object with the statistics on the search
     */
    public SearchStatistics solve(Predicate<SearchStatistics> limit) {
        SearchStatistics statistics = new SearchStatistics();
        return solve(statistics, limit);
    }

    /**
     * Executes a closure prior to effectively
     * starting a depth first search
     * with a given predicate called at each node
     * to stop the search when it becomes true.
     * The state manager saves the state
     * before executing the closure
     * and restores it after the search.
     * Any {@link InconsistencyException} that may
     * be throw when executing the closure is also catched.
     *
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @param subjectTo the closure to execute prior to the search starts
     * @return an object with the statistics on the search
     */
    public SearchStatistics solveSubjectTo(Predicate<SearchStatistics> limit, Procedure subjectTo) {
        SearchStatistics statistics = new SearchStatistics();
        sm.withNewState(() -> {
            try {
                subjectTo.call();
                solve(statistics, limit);
            } catch (InconsistencyException e) {
            }
        });
        return statistics;
    }

    private SearchStatistics solveRestarts(SearchStatistics statistics, Predicate<SearchStatistics> limit, int nbFailsCutoff, final double restartFactor) {
        int cutoff = nbFailsCutoff;
        final int[] cumulCutoff = new int[]{cutoff};
        while (!limit.test(statistics)) {
//            System.out.println("restart limit: "+cutoff+" fails");
            Predicate<SearchStatistics> restartLimit = limit.or(stat -> stat.numberOfFailures() > cumulCutoff[0]);
            sm.withNewState(() -> {
                try {
		            dfs(statistics, restartLimit);
                } catch (StopSearchException ignored) {
                } catch (StackOverflowError e) {
                    throw new NotImplementedException("dfs with explicit stack needed to pass this test");
                }
            });
            if(branchingSecond != null) {
                this.branching = this.branchingSecond;
                this.branchingSecond = null;
            }
            cutoff *= restartFactor;
            cumulCutoff[0] += cutoff;
        }
        statistics.setCompleted();
        return statistics;
    }

    public void initializeImpact(IntVar... x) {
        int[] arrayVal;
        IntHolder value = new IntHolder();
        for(IntVar a: x) {
            arrayVal = new int[a.size()];
            a.fillArray(arrayVal);
            value.setVar(a);
            for(int i = 0; i < arrayVal.length; i++) {
                value.setVal(arrayVal[i]);
                try {
                    sm.withNewState(() -> {
                        Factory.branchEqualRegisterImpact(value);
                    });
                }
                catch (InconsistencyException ignored) {
                    sm.restoreState();
                }
            }

        }
    }

    public void initializeImpactDomains(IntVar... x) {
        int[] arrayVal;
        IntHolder value = new IntHolder();
        for(IntVar a: x) {
            arrayVal = new int[a.size()];
            a.fillArray(arrayVal);
            value.setVar(a);
            for(int i = 0; i < arrayVal.length; i++) {
                value.setVal(arrayVal[i]);
                try {
                    sm.withNewState(() -> {
                        Factory.branchEqualRegisterImpactOnDomains(value);
                        });
                }
                catch (InconsistencyException ignored) {
                    sm.restoreState();
                }
            }

        }
    }


    /**
     * Effectively start a depth first search with restarts
     * looking for every solution.
     *
     * @return an object with the statistics on the search
     */
    public SearchStatistics solveRestarts() {
        SearchStatistics statistics = new SearchStatistics();
        return solveRestarts(statistics, stats -> false, 100, 1.5);
    }

    /**
     * Effectively start a depth first search with restarts
     * with a given predicate called at each node
     * to stop the search when it becomes true.
     *
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @return an object with the statistics on the search
     */
    public SearchStatistics solveRestarts(Predicate<SearchStatistics> limit) {
        SearchStatistics statistics = new SearchStatistics();
        return solveRestarts(statistics, limit, 100, 1.5);
    }

    /**
     * Effectively start a depth first search with restarts
     * with a given predicate called at each node
     * to stop the search when it becomes true.
     *
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @param nbFailCutoff
     * @param restartFactor
     * @return an object with the statistics on the search
     */
    public SearchStatistics solveRestarts(Predicate<SearchStatistics> limit, int nbFailCutoff, double restartFactor) {
        SearchStatistics statistics = new SearchStatistics();
        return solveRestarts(statistics, limit, nbFailCutoff, restartFactor);
    }

    /**
     * Effectively start a branch and bound
     * depth first search with a given objective.
     *
     * @param obj the objective to optimize that is tightened each
     *            time a new solution is found
     * @return an object with the statistics on the search
     */
    public SearchStatistics optimize(Objective obj) {
        return optimize(obj, stats -> false);
    }

    /**
     * Effectively start a branch and bound
     * depth first search with a given objective
     * and with a given predicate called at each node
     * to stop the search when it becomes true.
     *
     * @param obj the objective to optimize that is tightened each
     *            time a new solution is found
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @return an object with the statistics on the search
     */
    public SearchStatistics optimize(Objective obj, Predicate<SearchStatistics> limit) {
        SearchStatistics statistics = new SearchStatistics();
//         onSolution(() -> obj.tighten());
        onSolution(() -> {
		//System.out.println(" (solution found in "+statistics.numberOfFailures()+" fails and "+statistics.timeElapsed()+" msecs)"); 
		obj.tighten();});
        return solve(statistics, limit);
    }

    /**
     * Executes a closure prior to effectively
     * starting a branch and bound depth first search
     * with a given objective to optimize
     * and a given predicate called at each node
     * to stop the search when it becomes true.
     * The state manager saves the state
     * before executing the closure
     * and restores it after the search.
     * Any {@link InconsistencyException} that may
     * be throw when executing the closure is also catched.
     *
     * @param obj the objective to optimize that is tightened each
     *            time a new solution is found
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @param subjectTo the closure to execute prior to the search starts
     * @return an object with the statistics on the search
     */
    public SearchStatistics optimizeSubjectTo(Objective obj, Predicate<SearchStatistics> limit, Procedure subjectTo) {
        SearchStatistics statistics = new SearchStatistics();
        sm.withNewState(() -> {
            try {
                subjectTo.call();
                optimize(obj, limit);
            } catch (InconsistencyException e) {
            }
        });
        return statistics;
    }


    private void dfs(SearchStatistics statistics, Predicate<SearchStatistics> limit) {
        if (limit.test(statistics))
            throw new StopSearchException();
        Procedure[] branches = branching.get();
        if (branches.length == 0) {
            statistics.incrSolutions();
            notifySolution();
        } else {
            for (Procedure b : branches) {
                sm.withNewState(() -> {
                    try {
                        statistics.incrNodes();
                        b.call();
                        dfs(statistics, limit);
                    } catch (InconsistencyException e) {
                        statistics.incrFailures();
                        notifyFailure();
                    }
                });
            }
        }
    }

    

}
